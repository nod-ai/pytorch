// !!! This is a file automatically generated by hipify!!!
#pragma once

#include <ATen/Tensor.h>
#include <ATen/zoom/ZoomContext.h>
#include <ATen/zoom/HIPSparse.h>

#include <c10/core/ScalarType.h>

#include <type_traits>

namespace at::zoom::sparse {

template <typename T, hipsparseStatus_t (*destructor)(T*)>
struct HipSparseDescriptorDeleter {
  void operator()(T* x) {
    if (x != nullptr) {
      TORCH_HIPSPARSE_CHECK(destructor(x));
    }
  }
};

template <typename T, hipsparseStatus_t (*destructor)(T*)>
class HipSparseDescriptor {
 public:
  T* descriptor() const {
    return descriptor_.get();
  }
  T* descriptor() {
    return descriptor_.get();
  }

 protected:
  std::unique_ptr<T, HipSparseDescriptorDeleter<T, destructor>> descriptor_;
};

#if AT_USE_CUSPARSE_CONST_DESCRIPTORS() || AT_USE_HIPSPARSE_CONST_DESCRIPTORS()
template <typename T, hipsparseStatus_t (*destructor)(const T*)>
struct ConstHipSparseDescriptorDeleter {
  void operator()(T* x) {
    if (x != nullptr) {
      TORCH_HIPSPARSE_CHECK(destructor(x));
    }
  }
};

template <typename T, hipsparseStatus_t (*destructor)(const T*)>
class ConstHipSparseDescriptor {
 public:
  T* descriptor() const {
    return descriptor_.get();
  }
  T* descriptor() {
    return descriptor_.get();
  }

 protected:
  std::unique_ptr<T, ConstHipSparseDescriptorDeleter<T, destructor>> descriptor_;
};
#endif // AT_USE_CUSPARSE_CONST_DESCRIPTORS || AT_USE_HIPSPARSE_CONST_DESCRIPTORS

using hipsparseMatDescr = std::remove_pointer<hipsparseMatDescr_t>::type;
using hipsparseDnMatDescr = std::remove_pointer<hipsparseDnMatDescr_t>::type;
using hipsparseDnVecDescr = std::remove_pointer<hipsparseDnVecDescr_t>::type;
using hipsparseSpMatDescr = std::remove_pointer<hipsparseSpMatDescr_t>::type;
using hipsparseSpMatDescr = std::remove_pointer<hipsparseSpMatDescr_t>::type;
using hipsparseSpGEMMDescr = std::remove_pointer<hipsparseSpGEMMDescr_t>::type;
#if AT_USE_HIPSPARSE_TRIANGULAR_SOLVE()
using bsrsv2Info = std::remove_pointer<bsrsv2Info_t>::type;
using bsrsm2Info = std::remove_pointer<bsrsm2Info_t>::type;
#endif

// NOTE: This is only needed for CUDA 11 and earlier, since CUDA 12 introduced
// API for const descriptors
hipsparseStatus_t destroyConstDnMat(const hipsparseDnMatDescr* dnMatDescr);

class TORCH_ZOOM_API HipSparseMatDescriptor
    : public HipSparseDescriptor<hipsparseMatDescr, &hipsparseDestroyMatDescr> {
 public:
  HipSparseMatDescriptor() {
    hipsparseMatDescr_t raw_descriptor;
    TORCH_HIPSPARSE_CHECK(hipsparseCreateMatDescr(&raw_descriptor));
    descriptor_.reset(raw_descriptor);
  }

  HipSparseMatDescriptor(bool upper, bool unit) {
    hipsparseFillMode_t fill_mode =
        upper ? HIPSPARSE_FILL_MODE_UPPER : HIPSPARSE_FILL_MODE_LOWER;
    hipsparseDiagType_t diag_type =
        unit ? HIPSPARSE_DIAG_TYPE_UNIT : HIPSPARSE_DIAG_TYPE_NON_UNIT;
    hipsparseMatDescr_t raw_descriptor;
    TORCH_HIPSPARSE_CHECK(hipsparseCreateMatDescr(&raw_descriptor));
    TORCH_HIPSPARSE_CHECK(hipsparseSetMatFillMode(raw_descriptor, fill_mode));
    TORCH_HIPSPARSE_CHECK(hipsparseSetMatDiagType(raw_descriptor, diag_type));
    descriptor_.reset(raw_descriptor);
  }
};

#if AT_USE_HIPSPARSE_TRIANGULAR_SOLVE()

class TORCH_ZOOM_API HipSparseBsrsv2Info
    : public HipSparseDescriptor<bsrsv2Info, &hipsparseDestroyBsrsv2Info> {
 public:
  HipSparseBsrsv2Info() {
    bsrsv2Info_t raw_descriptor;
    TORCH_HIPSPARSE_CHECK(hipsparseCreateBsrsv2Info(&raw_descriptor));
    descriptor_.reset(raw_descriptor);
  }
};

class TORCH_ZOOM_API HipSparseBsrsm2Info
    : public HipSparseDescriptor<bsrsm2Info, &hipsparseDestroyBsrsm2Info> {
 public:
  HipSparseBsrsm2Info() {
    bsrsm2Info_t raw_descriptor;
    TORCH_HIPSPARSE_CHECK(hipsparseCreateBsrsm2Info(&raw_descriptor));
    descriptor_.reset(raw_descriptor);
  }
};

#endif // AT_USE_HIPSPARSE_TRIANGULAR_SOLVE

#if AT_USE_CUSPARSE_GENERIC_API() || AT_USE_HIPSPARSE_GENERIC_API()

hipsparseIndexType_t getHipSparseIndexType(const c10::ScalarType& scalar_type);

#if AT_USE_CUSPARSE_NON_CONST_DESCRIPTORS() || AT_USE_HIPSPARSE_NON_CONST_DESCRIPTORS()
class TORCH_ZOOM_API HipSparseDnMatDescriptor
    : public HipSparseDescriptor<hipsparseDnMatDescr, &hipsparseDestroyDnMat> {
 public:
  explicit HipSparseDnMatDescriptor(const Tensor& input, int64_t batch_offset = -1);
};

class TORCH_ZOOM_API HipSparseConstDnMatDescriptor
    : public HipSparseDescriptor<const hipsparseDnMatDescr, &destroyConstDnMat> {
 public:
  explicit HipSparseConstDnMatDescriptor(const Tensor& input, int64_t batch_offset = -1);
  hipsparseDnMatDescr* unsafe_mutable_descriptor() const {
    return const_cast<hipsparseDnMatDescr*>(descriptor());
  }
  hipsparseDnMatDescr* unsafe_mutable_descriptor() {
    return const_cast<hipsparseDnMatDescr*>(descriptor());
  }
};

class TORCH_ZOOM_API HipSparseDnVecDescriptor
    : public HipSparseDescriptor<hipsparseDnVecDescr, &hipsparseDestroyDnVec> {
 public:
  explicit HipSparseDnVecDescriptor(const Tensor& input);
};

class TORCH_ZOOM_API HipSparseSpMatDescriptor
    : public HipSparseDescriptor<hipsparseSpMatDescr, &hipsparseDestroySpMat> {};

#elif AT_USE_CUSPARSE_CONST_DESCRIPTORS() || AT_USE_HIPSPARSE_CONST_DESCRIPTORS()
  class TORCH_ZOOM_API HipSparseDnMatDescriptor
      : public ConstHipSparseDescriptor<
            hipsparseDnMatDescr,
            &hipsparseDestroyDnMat> {
   public:
    explicit HipSparseDnMatDescriptor(
        const Tensor& input,
        int64_t batch_offset = -1);
  };

  class TORCH_ZOOM_API HipSparseConstDnMatDescriptor
      : public ConstHipSparseDescriptor<
            const hipsparseDnMatDescr,
            &destroyConstDnMat> {
   public:
    explicit HipSparseConstDnMatDescriptor(
        const Tensor& input,
        int64_t batch_offset = -1);
  hipsparseDnMatDescr* unsafe_mutable_descriptor() const {
    return const_cast<hipsparseDnMatDescr*>(descriptor());
  }
  hipsparseDnMatDescr* unsafe_mutable_descriptor() {
    return const_cast<hipsparseDnMatDescr*>(descriptor());
  }
  };

  class TORCH_ZOOM_API HipSparseDnVecDescriptor
      : public ConstHipSparseDescriptor<
            hipsparseDnVecDescr,
            &hipsparseDestroyDnVec> {
   public:
    explicit HipSparseDnVecDescriptor(const Tensor& input);
  };

  class TORCH_ZOOM_API HipSparseSpMatDescriptor
      : public ConstHipSparseDescriptor<
            hipsparseSpMatDescr,
            &hipsparseDestroySpMat> {};
#endif // AT_USE_CUSPARSE_CONST_DESCRIPTORS() || AT_USE_HIPSPARSE_CONST_DESCRIPTORS()

class TORCH_ZOOM_API HipSparseSpMatCsrDescriptor
    : public HipSparseSpMatDescriptor {
 public:
  explicit HipSparseSpMatCsrDescriptor(const Tensor& input, int64_t batch_offset = -1);

  std::tuple<int64_t, int64_t, int64_t> get_size() {
    int64_t rows, cols, nnz;
    TORCH_HIPSPARSE_CHECK(hipsparseSpMatGetSize(
        this->descriptor(),
        &rows,
        &cols,
        &nnz));
    return std::make_tuple(rows, cols, nnz);
  }

  void set_tensor(const Tensor& input) {
    auto crow_indices = input.crow_indices();
    auto col_indices = input.col_indices();
    auto values = input.values();

    TORCH_INTERNAL_ASSERT_DEBUG_ONLY(crow_indices.is_contiguous());
    TORCH_INTERNAL_ASSERT_DEBUG_ONLY(col_indices.is_contiguous());
    TORCH_INTERNAL_ASSERT_DEBUG_ONLY(values.is_contiguous());
    TORCH_HIPSPARSE_CHECK(hipsparseCsrSetPointers(
        this->descriptor(),
        crow_indices.data_ptr(),
        col_indices.data_ptr(),
        values.data_ptr()));
  }

#if AT_USE_CUSPARSE_GENERIC_SPSV()
  void set_mat_fill_mode(bool upper) {
    hipsparseFillMode_t fill_mode =
        upper ? HIPSPARSE_FILL_MODE_UPPER : HIPSPARSE_FILL_MODE_LOWER;
    TORCH_HIPSPARSE_CHECK(hipsparseSpMatSetAttribute(
        this->descriptor(),
        CUSPARSE_SPMAT_FILL_MODE,
        &fill_mode,
        sizeof(fill_mode)));
  }

  void set_mat_diag_type(bool unit) {
    hipsparseDiagType_t diag_type =
        unit ? HIPSPARSE_DIAG_TYPE_UNIT : HIPSPARSE_DIAG_TYPE_NON_UNIT;
    TORCH_HIPSPARSE_CHECK(hipsparseSpMatSetAttribute(
        this->descriptor(),
        CUSPARSE_SPMAT_DIAG_TYPE,
        &diag_type,
        sizeof(diag_type)));
  }
#endif
};

#if AT_USE_CUSPARSE_GENERIC_SPSV()
class TORCH_ZOOM_API HipSparseSpSVDescriptor
    : public HipSparseDescriptor<hipsparseSpSVDescr, &hipsparseSpSV_destroyDescr> {
 public:
  HipSparseSpSVDescriptor() {
    hipsparseSpSVDescr_t raw_descriptor;
    TORCH_HIPSPARSE_CHECK(hipsparseSpSV_createDescr(&raw_descriptor));
    descriptor_.reset(raw_descriptor);
  }
};
#endif

#if AT_USE_CUSPARSE_GENERIC_SPSM()
class TORCH_ZOOM_API HipSparseSpSMDescriptor
    : public HipSparseDescriptor<hipsparseSpSMDescr, &hipsparseSpSM_destroyDescr> {
 public:
  HipSparseSpSMDescriptor() {
    hipsparseSpSMDescr_t raw_descriptor;
    TORCH_HIPSPARSE_CHECK(hipsparseSpSM_createDescr(&raw_descriptor));
    descriptor_.reset(raw_descriptor);
  }
};
#endif

class TORCH_ZOOM_API HipSparseSpGEMMDescriptor
    : public HipSparseDescriptor<hipsparseSpGEMMDescr, &hipsparseSpGEMM_destroyDescr> {
 public:
  HipSparseSpGEMMDescriptor() {
    hipsparseSpGEMMDescr_t raw_descriptor;
    TORCH_HIPSPARSE_CHECK(hipsparseSpGEMM_createDescr(&raw_descriptor));
    descriptor_.reset(raw_descriptor);
  }
};

#endif // AT_USE_CUSPARSE_GENERIC_API() || AT_USE_HIPSPARSE_GENERIC_API()

} // namespace at::zoom::sparse
