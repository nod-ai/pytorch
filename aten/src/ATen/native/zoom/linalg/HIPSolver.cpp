// !!! This is a file automatically generated by hipify!!!
#include <ATen/Context.h>
#include <ATen/NativeFunctions.h>
#include <ATen/native/zoom/linalg/HIPSolver.h>
#include <c10/zoom/ZoomCachingAllocator.h>
#include <c10/macros/Export.h>

namespace at::zoom::solver {

template <>
void getrf<double>(
    hipsolverDnHandle_t handle, int m, int n, double* dA, int ldda, int* ipiv, int* info) {
  int lwork;
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnDgetrf_bufferSize(handle, m, n, dA, ldda, &lwork));
  auto& allocator = *::c10::zoom::ZoomCachingAllocator::get();
  auto dataPtr = allocator.allocate(sizeof(double)*lwork);
  TORCH_HIPSOLVER_CHECK(hipsolverDnDgetrf(
      handle, m, n, dA, ldda, static_cast<double*>(dataPtr.get()), ipiv, info));
}

template <>
void getrf<float>(
    hipsolverDnHandle_t handle, int m, int n, float* dA, int ldda, int* ipiv, int* info) {
  int lwork;
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnSgetrf_bufferSize(handle, m, n, dA, ldda, &lwork));
  auto& allocator = *::c10::zoom::ZoomCachingAllocator::get();
  auto dataPtr = allocator.allocate(sizeof(float)*lwork);
  TORCH_HIPSOLVER_CHECK(hipsolverDnSgetrf(
      handle, m, n, dA, ldda, static_cast<float*>(dataPtr.get()), ipiv, info));
}

template <>
void getrf<c10::complex<double>>(
    hipsolverDnHandle_t handle,
    int m,
    int n,
    c10::complex<double>* dA,
    int ldda,
    int* ipiv,
    int* info) {
  int lwork;
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgetrf_bufferSize(
      handle, m, n, reinterpret_cast<hipDoubleComplex*>(dA), ldda, &lwork));
  auto& allocator = *::c10::zoom::ZoomCachingAllocator::get();
  auto dataPtr = allocator.allocate(sizeof(hipDoubleComplex) * lwork);
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgetrf(
      handle,
      m,
      n,
      reinterpret_cast<hipDoubleComplex*>(dA),
      ldda,
      static_cast<hipDoubleComplex*>(dataPtr.get()),
      ipiv,
      info));
}

template <>
void getrf<c10::complex<float>>(
    hipsolverDnHandle_t handle,
    int m,
    int n,
    c10::complex<float>* dA,
    int ldda,
    int* ipiv,
    int* info) {
  int lwork;
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgetrf_bufferSize(
      handle, m, n, reinterpret_cast<hipComplex*>(dA), ldda, &lwork));
  auto& allocator = *::c10::zoom::ZoomCachingAllocator::get();
  auto dataPtr = allocator.allocate(sizeof(hipComplex) * lwork);
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgetrf(
      handle,
      m,
      n,
      reinterpret_cast<hipComplex*>(dA),
      ldda,
      static_cast<hipComplex*>(dataPtr.get()),
      ipiv,
      info));
}

template <>
void getrs<double>(
    hipsolverDnHandle_t handle, int n, int nrhs, double* dA, int lda, int* ipiv, double* ret, int ldb, int* info, hipsolverOperation_t trans) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDgetrs(
    handle, trans, n, nrhs, dA, lda, ipiv, ret, ldb, info));
}

template <>
void getrs<float>(
    hipsolverDnHandle_t handle, int n, int nrhs, float* dA, int lda, int* ipiv, float* ret, int ldb, int* info, hipsolverOperation_t trans) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSgetrs(
    handle, trans, n, nrhs, dA, lda, ipiv, ret, ldb, info));
}

template <>
void getrs<c10::complex<double>>(
    hipsolverDnHandle_t handle,
    int n,
    int nrhs,
    c10::complex<double>* dA,
    int lda,
    int* ipiv,
    c10::complex<double>* ret,
    int ldb,
    int* info,
    hipsolverOperation_t trans) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgetrs(
      handle,
      trans,
      n,
      nrhs,
      reinterpret_cast<hipDoubleComplex*>(dA),
      lda,
      ipiv,
      reinterpret_cast<hipDoubleComplex*>(ret),
      ldb,
      info));
}

template <>
void getrs<c10::complex<float>>(
    hipsolverDnHandle_t handle,
    int n,
    int nrhs,
    c10::complex<float>* dA,
    int lda,
    int* ipiv,
    c10::complex<float>* ret,
    int ldb,
    int* info,
    hipsolverOperation_t trans) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgetrs(
      handle,
      trans,
      n,
      nrhs,
      reinterpret_cast<hipComplex*>(dA),
      lda,
      ipiv,
      reinterpret_cast<hipComplex*>(ret),
      ldb,
      info));
}

template <>
void sytrf_bufferSize<double>(HIPSOLVER_SYTRF_BUFFER_ARGTYPES(double)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDsytrf_bufferSize(handle, n, A, lda, lwork));
}

template <>
void sytrf_bufferSize<float>(HIPSOLVER_SYTRF_BUFFER_ARGTYPES(float)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSsytrf_bufferSize(handle, n, A, lda, lwork));
}

template <>
void sytrf_bufferSize<c10::complex<double>>(
    HIPSOLVER_SYTRF_BUFFER_ARGTYPES(c10::complex<double>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZsytrf_bufferSize(
      handle, n, reinterpret_cast<hipDoubleComplex*>(A), lda, lwork));
}

template <>
void sytrf_bufferSize<c10::complex<float>>(
    HIPSOLVER_SYTRF_BUFFER_ARGTYPES(c10::complex<float>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCsytrf_bufferSize(
      handle, n, reinterpret_cast<hipComplex*>(A), lda, lwork));
}

template <>
void sytrf<double>(HIPSOLVER_SYTRF_ARGTYPES(double)) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnDsytrf(handle, uplo, n, A, lda, ipiv, work, lwork, devInfo));
}

template <>
void sytrf<float>(HIPSOLVER_SYTRF_ARGTYPES(float)) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnSsytrf(handle, uplo, n, A, lda, ipiv, work, lwork, devInfo));
}

template <>
void sytrf<c10::complex<double>>(
    HIPSOLVER_SYTRF_ARGTYPES(c10::complex<double>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZsytrf(
      handle,
      uplo,
      n,
      reinterpret_cast<hipDoubleComplex*>(A),
      lda,
      ipiv,
      reinterpret_cast<hipDoubleComplex*>(work),
      lwork,
      devInfo));
}

template <>
void sytrf<c10::complex<float>>(
    HIPSOLVER_SYTRF_ARGTYPES(c10::complex<float>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCsytrf(
      handle,
      uplo,
      n,
      reinterpret_cast<hipComplex*>(A),
      lda,
      ipiv,
      reinterpret_cast<hipComplex*>(work),
      lwork,
      devInfo));
}

template<>
void gesvd_buffersize<float>(HIPSOLVER_GESVD_BUFFERSIZE_ARGTYPES()) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSgesvd_bufferSize(handle, m, n, lwork));
}

template<>
void gesvd_buffersize<double>(HIPSOLVER_GESVD_BUFFERSIZE_ARGTYPES()) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDgesvd_bufferSize(handle, m, n, lwork));
}

template<>
void gesvd_buffersize<c10::complex<float>>(HIPSOLVER_GESVD_BUFFERSIZE_ARGTYPES()) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgesvd_bufferSize(handle, m, n, lwork));
}

template<>
void gesvd_buffersize<c10::complex<double>>(HIPSOLVER_GESVD_BUFFERSIZE_ARGTYPES()) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgesvd_bufferSize(handle, m, n, lwork));
}


template<>
void gesvd<float>(HIPSOLVER_GESVD_ARGTYPES(float, float)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSgesvd(
      handle, jobu, jobvt, m, n, A, lda, S, U, ldu, VT, ldvt, work, lwork, rwork, info));
}

template<>
void gesvd<double>(HIPSOLVER_GESVD_ARGTYPES(double, double)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDgesvd(
      handle, jobu, jobvt, m, n, A, lda, S, U, ldu, VT, ldvt, work, lwork, rwork, info));
}


template<>
void gesvd<c10::complex<float>>(HIPSOLVER_GESVD_ARGTYPES(c10::complex<float>, float)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgesvd(
      handle, jobu, jobvt, m, n,
      reinterpret_cast<hipComplex*>(A),
      lda, S,
      reinterpret_cast<hipComplex*>(U),
      ldu,
      reinterpret_cast<hipComplex*>(VT),
      ldvt,
      reinterpret_cast<hipComplex*>(work),
      lwork, rwork, info
  ));
}

template<>
void gesvd<c10::complex<double>>(HIPSOLVER_GESVD_ARGTYPES(c10::complex<double>, double)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgesvd(
      handle, jobu, jobvt, m, n,
      reinterpret_cast<hipDoubleComplex*>(A),
      lda, S,
      reinterpret_cast<hipDoubleComplex*>(U),
      ldu,
      reinterpret_cast<hipDoubleComplex*>(VT),
      ldvt,
      reinterpret_cast<hipDoubleComplex*>(work),
      lwork, rwork, info
  ));
}


template<>
void gesvdj_buffersize<float>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int econ, int m, int n, float *A, int lda, float *S,
    float *U, int ldu, float *V, int ldv, int *lwork, hipsolverGesvdjInfo_t params
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSgesvdj_bufferSize(handle, jobz, econ, m, n, A, lda, S, U, ldu, V, ldv, lwork, params));
}

template<>
void gesvdj_buffersize<double>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int econ, int m, int n, double *A, int lda, double *S,
    double *U, int ldu, double *V, int ldv, int *lwork, hipsolverGesvdjInfo_t params
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDgesvdj_bufferSize(handle, jobz, econ, m, n, A, lda, S, U, ldu, V, ldv, lwork, params));
}

template<>
void gesvdj_buffersize<c10::complex<float>>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int econ, int m, int n, c10::complex<float> *A, int lda, float *S,
    c10::complex<float> *U, int ldu, c10::complex<float> *V, int ldv, int *lwork, hipsolverGesvdjInfo_t params
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgesvdj_bufferSize(handle, jobz, econ, m, n,
    reinterpret_cast<hipComplex*>(A),
    lda,
    S,
    reinterpret_cast<hipComplex*>(U),
    ldu,
    reinterpret_cast<hipComplex*>(V),
    ldv, lwork, params));
}

template<>
void gesvdj_buffersize<c10::complex<double>>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int econ, int m, int n, c10::complex<double> *A, int lda, double *S,
    c10::complex<double> *U, int ldu, c10::complex<double> *V, int ldv, int *lwork, hipsolverGesvdjInfo_t params
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgesvdj_bufferSize(handle, jobz, econ, m, n,
    reinterpret_cast<hipDoubleComplex*>(A),
    lda,
    S,
    reinterpret_cast<hipDoubleComplex*>(U),
    ldu,
    reinterpret_cast<hipDoubleComplex*>(V),
    ldv, lwork, params));
}


template<>
void gesvdj<float>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int econ, int m, int n, float* A, int lda, float* S, float* U,
    int ldu, float *V, int ldv, float* work, int lwork, int *info, hipsolverGesvdjInfo_t params
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSgesvdj(handle, jobz, econ, m, n, A, lda, S, U, ldu, V, ldv, work, lwork, info, params));
}

template<>
void gesvdj<double>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int econ, int m, int n, double* A, int lda, double* S, double* U,
    int ldu, double *V, int ldv, double* work, int lwork, int *info, hipsolverGesvdjInfo_t params
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDgesvdj(handle, jobz, econ, m, n, A, lda, S, U, ldu, V, ldv, work, lwork, info, params));
}

template<>
void gesvdj<c10::complex<float>>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int econ, int m, int n, c10::complex<float>* A, int lda, float* S, c10::complex<float>* U,
    int ldu, c10::complex<float> *V, int ldv, c10::complex<float>* work, int lwork, int *info, hipsolverGesvdjInfo_t params
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgesvdj(
    handle, jobz, econ, m, n,
    reinterpret_cast<hipComplex*>(A),
    lda, S,
    reinterpret_cast<hipComplex*>(U),
    ldu,
    reinterpret_cast<hipComplex*>(V),
    ldv,
    reinterpret_cast<hipComplex*>(work),
    lwork, info, params));
}

template<>
void gesvdj<c10::complex<double>>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int econ, int m, int n, c10::complex<double>* A, int lda, double* S, c10::complex<double>* U,
    int ldu, c10::complex<double> *V, int ldv, c10::complex<double>* work, int lwork, int *info, hipsolverGesvdjInfo_t params
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgesvdj(
    handle, jobz, econ, m, n,
    reinterpret_cast<hipDoubleComplex*>(A),
    lda, S,
    reinterpret_cast<hipDoubleComplex*>(U),
    ldu,
    reinterpret_cast<hipDoubleComplex*>(V),
    ldv,
    reinterpret_cast<hipDoubleComplex*>(work),
    lwork, info, params));
}


template<>
void gesvdjBatched<float>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int m, int n, float* A, int lda, float* S, float* U,
    int ldu, float *V, int ldv, int *info, hipsolverGesvdjInfo_t params, int batchSize
) {
  int lwork;
  TORCH_HIPSOLVER_CHECK(hipsolverDnSgesvdjBatched_bufferSize(handle, jobz, m, n, A, lda, S, U, ldu, V, ldv, &lwork, params, batchSize));

  auto& allocator = *::c10::zoom::ZoomCachingAllocator::get();
  auto dataPtr = allocator.allocate(sizeof(float)*lwork);

  TORCH_HIPSOLVER_CHECK(hipsolverDnSgesvdjBatched(
    handle, jobz, m, n, A, lda, S, U, ldu, V, ldv,
    static_cast<float*>(dataPtr.get()),
    lwork, info, params, batchSize));
}

template<>
void gesvdjBatched<double>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int m, int n, double* A, int lda, double* S, double* U,
    int ldu, double *V, int ldv, int *info, hipsolverGesvdjInfo_t params, int batchSize
) {
  int lwork;
  TORCH_HIPSOLVER_CHECK(hipsolverDnDgesvdjBatched_bufferSize(handle, jobz, m, n, A, lda, S, U, ldu, V, ldv, &lwork, params, batchSize));

  auto& allocator = *::c10::zoom::ZoomCachingAllocator::get();
  auto dataPtr = allocator.allocate(sizeof(double)*lwork);

  TORCH_HIPSOLVER_CHECK(hipsolverDnDgesvdjBatched(
    handle, jobz, m, n, A, lda, S, U, ldu, V, ldv,
    static_cast<double*>(dataPtr.get()),
    lwork, info, params, batchSize));
}

template<>
void gesvdjBatched<c10::complex<float>>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int m, int n, c10::complex<float>* A, int lda, float* S, c10::complex<float>* U,
    int ldu, c10::complex<float> *V, int ldv, int *info, hipsolverGesvdjInfo_t params, int batchSize
) {
  int lwork;
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgesvdjBatched_bufferSize(
    handle, jobz, m, n,
    reinterpret_cast<hipComplex*>(A),
    lda, S,
    reinterpret_cast<hipComplex*>(U),
    ldu,
    reinterpret_cast<hipComplex*>(V),
    ldv, &lwork, params, batchSize));

  auto& allocator = *::c10::zoom::ZoomCachingAllocator::get();
  auto dataPtr = allocator.allocate(sizeof(hipComplex)*lwork);

  TORCH_HIPSOLVER_CHECK(hipsolverDnCgesvdjBatched(
    handle, jobz, m, n,
    reinterpret_cast<hipComplex*>(A),
    lda, S,
    reinterpret_cast<hipComplex*>(U),
    ldu,
    reinterpret_cast<hipComplex*>(V),
    ldv,
    static_cast<hipComplex*>(dataPtr.get()),
    lwork, info, params, batchSize));
}

template<>
void gesvdjBatched<c10::complex<double>>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int m, int n, c10::complex<double>* A, int lda, double* S, c10::complex<double>* U,
    int ldu, c10::complex<double> *V, int ldv, int *info, hipsolverGesvdjInfo_t params, int batchSize
) {
  int lwork;
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgesvdjBatched_bufferSize(
    handle, jobz, m, n,
    reinterpret_cast<hipDoubleComplex*>(A),
    lda, S,
    reinterpret_cast<hipDoubleComplex*>(U),
    ldu,
    reinterpret_cast<hipDoubleComplex*>(V),
    ldv, &lwork, params, batchSize));

  auto& allocator = *::c10::zoom::ZoomCachingAllocator::get();
  auto dataPtr = allocator.allocate(sizeof(hipDoubleComplex)*lwork);

  TORCH_HIPSOLVER_CHECK(hipsolverDnZgesvdjBatched(
    handle, jobz, m, n,
    reinterpret_cast<hipDoubleComplex*>(A),
    lda, S,
    reinterpret_cast<hipDoubleComplex*>(U),
    ldu,
    reinterpret_cast<hipDoubleComplex*>(V),
    ldv,
    static_cast<hipDoubleComplex*>(dataPtr.get()),
    lwork, info, params, batchSize));
}


// ROCM does not implement gesdva yet
#ifdef CUDART_VERSION
template<>
void gesvdaStridedBatched_buffersize<float>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int rank, int m, int n, float *A, int lda, long long int strideA,
    float *S, long long int strideS, float *U, int ldu, long long int strideU, float *V, int ldv, long long int strideV,
    int *lwork, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSgesvdaStridedBatched_bufferSize(
    handle, jobz, rank, m, n, A, lda, strideA, S, strideS, U, ldu, strideU, V, ldv, strideV, lwork, batchSize
  ));
}

template<>
void gesvdaStridedBatched_buffersize<double>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int rank, int m, int n, double *A, int lda, long long int strideA,
    double *S, long long int strideS, double *U, int ldu, long long int strideU, double *V, int ldv, long long int strideV,
    int *lwork, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDgesvdaStridedBatched_bufferSize(
    handle, jobz, rank, m, n, A, lda, strideA, S, strideS, U, ldu, strideU, V, ldv, strideV, lwork, batchSize
  ));
}

template<>
void gesvdaStridedBatched_buffersize<c10::complex<float>>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int rank, int m, int n, c10::complex<float> *A, int lda, long long int strideA,
    float *S, long long int strideS, c10::complex<float> *U, int ldu, long long int strideU,
    c10::complex<float> *V, int ldv, long long int strideV,
    int *lwork, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgesvdaStridedBatched_bufferSize(
    handle, jobz, rank, m, n,
    reinterpret_cast<hipComplex*>(A),
    lda, strideA, S, strideS,
    reinterpret_cast<hipComplex*>(U),
    ldu, strideU,
    reinterpret_cast<hipComplex*>(V),
    ldv, strideV, lwork, batchSize
  ));
}

template<>
void gesvdaStridedBatched_buffersize<c10::complex<double>>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int rank, int m, int n, c10::complex<double> *A, int lda, long long int strideA,
    double *S, long long int strideS, c10::complex<double> *U, int ldu, long long int strideU,
    c10::complex<double> *V, int ldv, long long int strideV,
    int *lwork, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgesvdaStridedBatched_bufferSize(
    handle, jobz, rank, m, n,
    reinterpret_cast<hipDoubleComplex*>(A),
    lda, strideA, S, strideS,
    reinterpret_cast<hipDoubleComplex*>(U),
    ldu, strideU,
    reinterpret_cast<hipDoubleComplex*>(V),
    ldv, strideV, lwork, batchSize
  ));
}


template<>
void gesvdaStridedBatched<float>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int rank, int m, int n, float *A, int lda, long long int strideA,
    float *S, long long int strideS, float *U, int ldu, long long int strideU, float *V, int ldv, long long int strideV,
    float *work, int lwork, int *info, double *h_R_nrmF, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSgesvdaStridedBatched(
    handle, jobz, rank, m, n, A, lda, strideA, S, strideS, U, ldu, strideU, V, ldv, strideV, work, lwork, info, h_R_nrmF, batchSize
  ));
}

template<>
void gesvdaStridedBatched<double>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int rank, int m, int n, double *A, int lda, long long int strideA,
    double *S, long long int strideS, double *U, int ldu, long long int strideU, double *V, int ldv, long long int strideV,
    double *work, int lwork, int *info, double *h_R_nrmF, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDgesvdaStridedBatched(
    handle, jobz, rank, m, n, A, lda, strideA, S, strideS, U, ldu, strideU, V, ldv, strideV, work, lwork, info, h_R_nrmF, batchSize
  ));
}

template<>
void gesvdaStridedBatched<c10::complex<float>>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int rank, int m, int n, c10::complex<float> *A, int lda, long long int strideA,
    float *S, long long int strideS, c10::complex<float> *U, int ldu, long long int strideU,
    c10::complex<float> *V, int ldv, long long int strideV,
    c10::complex<float> *work, int lwork, int *info, double *h_R_nrmF, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgesvdaStridedBatched(
    handle, jobz, rank, m, n,
    reinterpret_cast<hipComplex*>(A),
    lda, strideA, S, strideS,
    reinterpret_cast<hipComplex*>(U),
    ldu, strideU,
    reinterpret_cast<hipComplex*>(V),
    ldv, strideV,
    reinterpret_cast<hipComplex*>(work),
    lwork, info, h_R_nrmF, batchSize
  ));
}

template<>
void gesvdaStridedBatched<c10::complex<double>>(
    hipsolverDnHandle_t handle, hipsolverEigMode_t jobz, int rank, int m, int n, c10::complex<double> *A, int lda, long long int strideA,
    double *S, long long int strideS, c10::complex<double> *U, int ldu, long long int strideU,
    c10::complex<double> *V, int ldv, long long int strideV,
    c10::complex<double> *work, int lwork, int *info, double *h_R_nrmF, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgesvdaStridedBatched(
    handle, jobz, rank, m, n,
    reinterpret_cast<hipDoubleComplex*>(A),
    lda, strideA, S, strideS,
    reinterpret_cast<hipDoubleComplex*>(U),
    ldu, strideU,
    reinterpret_cast<hipDoubleComplex*>(V),
    ldv, strideV,
    reinterpret_cast<hipDoubleComplex*>(work),
    lwork, info, h_R_nrmF, batchSize
  ));
}
#endif


template<>
void potrf<float>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, float* A, int lda, float* work, int lwork, int* info
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSpotrf(
    handle, uplo, n, A, lda, work, lwork, info));
}

template<>
void potrf<double>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, double* A, int lda, double* work, int lwork, int* info
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDpotrf(
    handle, uplo, n, A, lda, work, lwork, info));
}

template<>
void potrf<c10::complex<float>>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, c10::complex<float>* A, int lda, c10::complex<float>* work, int lwork, int* info
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCpotrf(
    handle,
    uplo,
    n,
    reinterpret_cast<hipComplex*>(A),
    lda,
    reinterpret_cast<hipComplex*>(work),
    lwork,
    info));
}

template<>
void potrf<c10::complex<double>>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, c10::complex<double>* A, int lda, c10::complex<double>* work, int lwork, int* info
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZpotrf(
    handle,
    uplo,
    n,
    reinterpret_cast<hipDoubleComplex*>(A),
    lda,
    reinterpret_cast<hipDoubleComplex*>(work),
    lwork,
    info));
}


template<>
void potrf_buffersize<float>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, float* A, int lda, int* lwork
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSpotrf_bufferSize(handle, uplo, n, A, lda, lwork));
}

template<>
void potrf_buffersize<double>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, double* A, int lda, int* lwork
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDpotrf_bufferSize(handle, uplo, n, A, lda, lwork));
}

template<>
void potrf_buffersize<c10::complex<float>>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, c10::complex<float>* A, int lda, int* lwork
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCpotrf_bufferSize(
    handle, uplo, n,
    reinterpret_cast<hipComplex*>(A),
    lda, lwork));
}

template<>
void potrf_buffersize<c10::complex<double>>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, c10::complex<double>* A, int lda, int* lwork
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZpotrf_bufferSize(
    handle, uplo, n,
    reinterpret_cast<hipDoubleComplex*>(A),
    lda, lwork));
}


template<>
void potrfBatched<float>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, float** A, int lda, int* info, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSpotrfBatched(handle, uplo, n, A, lda, info, batchSize));
}

template<>
void potrfBatched<double>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, double** A, int lda, int* info, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDpotrfBatched(handle, uplo, n, A, lda, info, batchSize));
}

template<>
void potrfBatched<c10::complex<float>>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, c10::complex<float>** A, int lda, int* info, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCpotrfBatched(
    handle, uplo, n,
    reinterpret_cast<hipComplex**>(A),
    lda, info, batchSize));
}

template<>
void potrfBatched<c10::complex<double>>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, c10::complex<double>** A, int lda, int* info, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZpotrfBatched(
    handle, uplo, n,
    reinterpret_cast<hipDoubleComplex**>(A),
    lda, info, batchSize));
}

template <>
void geqrf_bufferSize<float>(HIPSOLVER_GEQRF_BUFFERSIZE_ARGTYPES(float)) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnSgeqrf_bufferSize(handle, m, n, A, lda, lwork));
}

template <>
void geqrf_bufferSize<double>(HIPSOLVER_GEQRF_BUFFERSIZE_ARGTYPES(double)) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnDgeqrf_bufferSize(handle, m, n, A, lda, lwork));
}

template <>
void geqrf_bufferSize<c10::complex<float>>(
    HIPSOLVER_GEQRF_BUFFERSIZE_ARGTYPES(c10::complex<float>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgeqrf_bufferSize(
      handle, m, n, reinterpret_cast<hipComplex*>(A), lda, lwork));
}

template <>
void geqrf_bufferSize<c10::complex<double>>(
    HIPSOLVER_GEQRF_BUFFERSIZE_ARGTYPES(c10::complex<double>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgeqrf_bufferSize(
      handle, m, n, reinterpret_cast<hipDoubleComplex*>(A), lda, lwork));
}

template <>
void geqrf<float>(HIPSOLVER_GEQRF_ARGTYPES(float)) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnSgeqrf(handle, m, n, A, lda, tau, work, lwork, devInfo));
}

template <>
void geqrf<double>(HIPSOLVER_GEQRF_ARGTYPES(double)) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnDgeqrf(handle, m, n, A, lda, tau, work, lwork, devInfo));
}

template <>
void geqrf<c10::complex<float>>(
    HIPSOLVER_GEQRF_ARGTYPES(c10::complex<float>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCgeqrf(
      handle,
      m,
      n,
      reinterpret_cast<hipComplex*>(A),
      lda,
      reinterpret_cast<hipComplex*>(tau),
      reinterpret_cast<hipComplex*>(work),
      lwork,
      devInfo));
}

template <>
void geqrf<c10::complex<double>>(
    HIPSOLVER_GEQRF_ARGTYPES(c10::complex<double>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZgeqrf(
      handle,
      m,
      n,
      reinterpret_cast<hipDoubleComplex*>(A),
      lda,
      reinterpret_cast<hipDoubleComplex*>(tau),
      reinterpret_cast<hipDoubleComplex*>(work),
      lwork,
      devInfo));
}

template<>
void potrs<float>(
    hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, int nrhs, const float *A, int lda, float *B, int ldb, int *devInfo
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSpotrs(handle, uplo, n, nrhs, A, lda, B, ldb, devInfo));
}

template<>
void potrs<double>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, int nrhs, const double *A, int lda, double *B, int ldb, int *devInfo
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDpotrs(handle, uplo, n, nrhs, A, lda, B, ldb, devInfo));
}

template<>
void potrs<c10::complex<float>>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, int nrhs, const c10::complex<float> *A, int lda, c10::complex<float> *B, int ldb, int *devInfo
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCpotrs(
    handle, uplo, n, nrhs,
    reinterpret_cast<const hipComplex*>(A),
    lda,
    reinterpret_cast<hipComplex*>(B),
    ldb, devInfo));
}

template<>
void potrs<c10::complex<double>>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, int nrhs, const c10::complex<double> *A, int lda, c10::complex<double> *B, int ldb, int *devInfo
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZpotrs(
    handle, uplo, n, nrhs,
    reinterpret_cast<const hipDoubleComplex*>(A),
    lda,
    reinterpret_cast<hipDoubleComplex*>(B),
    ldb, devInfo));
}

template<>
void potrsBatched<float>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, int nrhs, float *Aarray[], int lda, float *Barray[], int ldb, int *info, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSpotrsBatched(handle, uplo, n, nrhs, Aarray, lda, Barray, ldb, info, batchSize));
}

template<>
void potrsBatched<double>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, int nrhs, double *Aarray[], int lda, double *Barray[], int ldb, int *info, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDpotrsBatched(handle, uplo, n, nrhs, Aarray, lda, Barray, ldb, info, batchSize));
}

template<>
void potrsBatched<c10::complex<float>>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, int nrhs, c10::complex<float> *Aarray[], int lda, c10::complex<float> *Barray[], int ldb, int *info, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCpotrsBatched(
    handle, uplo, n, nrhs,
    reinterpret_cast<hipComplex**>(Aarray),
    lda,
    reinterpret_cast<hipComplex**>(Barray),
    ldb, info, batchSize));
}

template<>
void potrsBatched<c10::complex<double>>(
  hipsolverDnHandle_t handle, hipsolverFillMode_t uplo, int n, int nrhs, c10::complex<double> *Aarray[], int lda, c10::complex<double> *Barray[], int ldb, int *info, int batchSize
) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZpotrsBatched(
    handle, uplo, n, nrhs,
    reinterpret_cast<hipDoubleComplex**>(Aarray),
    lda,
    reinterpret_cast<hipDoubleComplex**>(Barray),
    ldb, info, batchSize));
}


template <>
void orgqr_buffersize<float>(
    hipsolverDnHandle_t handle,
    int m, int n, int k,
    const float* A, int lda,
    const float* tau, int* lwork) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnSorgqr_bufferSize(handle, m, n, k, A, lda, tau, lwork));
}

template <>
void orgqr_buffersize<double>(
    hipsolverDnHandle_t handle,
    int m, int n, int k,
    const double* A, int lda,
    const double* tau, int* lwork) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnDorgqr_bufferSize(handle, m, n, k, A, lda, tau, lwork));
}

template <>
void orgqr_buffersize<c10::complex<float>>(
    hipsolverDnHandle_t handle,
    int m, int n, int k,
    const c10::complex<float>* A, int lda,
    const c10::complex<float>* tau, int* lwork) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCungqr_bufferSize(
      handle,
      m, n, k,
      reinterpret_cast<const hipComplex*>(A), lda,
      reinterpret_cast<const hipComplex*>(tau), lwork));
}

template <>
void orgqr_buffersize<c10::complex<double>>(
    hipsolverDnHandle_t handle,
    int m, int n, int k,
    const c10::complex<double>* A, int lda,
    const c10::complex<double>* tau, int* lwork) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZungqr_bufferSize(
      handle,
      m, n, k,
      reinterpret_cast<const hipDoubleComplex*>(A), lda,
      reinterpret_cast<const hipDoubleComplex*>(tau), lwork));
}

template <>
void orgqr<float>(
    hipsolverDnHandle_t handle,
    int m, int n, int k,
    float* A, int lda,
    const float* tau,
    float* work, int lwork,
    int* devInfo) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnSorgqr(handle, m, n, k, A, lda, tau, work, lwork, devInfo));
}

template <>
void orgqr<double>(
    hipsolverDnHandle_t handle,
    int m, int n, int k,
    double* A, int lda,
    const double* tau,
    double* work, int lwork,
    int* devInfo) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnDorgqr(handle, m, n, k, A, lda, tau, work, lwork, devInfo));
}

template <>
void orgqr<c10::complex<float>>(
    hipsolverDnHandle_t handle,
    int m, int n, int k,
    c10::complex<float>* A, int lda,
    const c10::complex<float>* tau,
    c10::complex<float>* work, int lwork,
    int* devInfo) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCungqr(
      handle,
      m, n, k,
      reinterpret_cast<hipComplex*>(A), lda,
      reinterpret_cast<const hipComplex*>(tau),
      reinterpret_cast<hipComplex*>(work), lwork,
      devInfo));
}

template <>
void orgqr<c10::complex<double>>(
    hipsolverDnHandle_t handle,
    int m, int n, int k,
    c10::complex<double>* A, int lda,
    const c10::complex<double>* tau,
    c10::complex<double>* work, int lwork,
    int* devInfo) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZungqr(
      handle,
      m, n, k,
      reinterpret_cast<hipDoubleComplex*>(A), lda,
      reinterpret_cast<const hipDoubleComplex*>(tau),
      reinterpret_cast<hipDoubleComplex*>(work), lwork,
      devInfo));
}

template <>
void ormqr_bufferSize<float>(HIPSOLVER_ORMQR_BUFFERSIZE_ARGTYPES(float)) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnSormqr_bufferSize(handle, side, trans, m, n, k, A, lda, tau, C, ldc, lwork));
}

template <>
void ormqr_bufferSize<double>(HIPSOLVER_ORMQR_BUFFERSIZE_ARGTYPES(double)) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnDormqr_bufferSize(handle, side, trans, m, n, k, A, lda, tau, C, ldc, lwork));
}

template <>
void ormqr_bufferSize<c10::complex<float>>(
    HIPSOLVER_ORMQR_BUFFERSIZE_ARGTYPES(c10::complex<float>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCunmqr_bufferSize(
      handle, side, trans,
      m, n, k,
      reinterpret_cast<const hipComplex*>(A), lda,
      reinterpret_cast<const hipComplex*>(tau),
      reinterpret_cast<const hipComplex*>(C), ldc,
      lwork));
}

template <>
void ormqr_bufferSize<c10::complex<double>>(
    HIPSOLVER_ORMQR_BUFFERSIZE_ARGTYPES(c10::complex<double>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZunmqr_bufferSize(
      handle, side, trans,
      m, n, k,
      reinterpret_cast<const hipDoubleComplex*>(A), lda,
      reinterpret_cast<const hipDoubleComplex*>(tau),
      reinterpret_cast<const hipDoubleComplex*>(C), ldc,
      lwork));
}

template <>
void ormqr<float>(HIPSOLVER_ORMQR_ARGTYPES(float)) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnSormqr(handle, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, devInfo));
}

template <>
void ormqr<double>(HIPSOLVER_ORMQR_ARGTYPES(double)) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnDormqr(handle, side, trans, m, n, k, A, lda, tau, C, ldc, work, lwork, devInfo));
}

template <>
void ormqr<c10::complex<float>>(HIPSOLVER_ORMQR_ARGTYPES(c10::complex<float>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCunmqr(
      handle, side, trans,
      m, n, k,
      reinterpret_cast<const hipComplex*>(A), lda,
      reinterpret_cast<const hipComplex*>(tau),
      reinterpret_cast<hipComplex*>(C), ldc,
      reinterpret_cast<hipComplex*>(work), lwork,
      devInfo));
}

template <>
void ormqr<c10::complex<double>>(HIPSOLVER_ORMQR_ARGTYPES(c10::complex<double>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZunmqr(
      handle, side, trans,
      m, n, k,
      reinterpret_cast<const hipDoubleComplex*>(A), lda,
      reinterpret_cast<const hipDoubleComplex*>(tau),
      reinterpret_cast<hipDoubleComplex*>(C), ldc,
      reinterpret_cast<hipDoubleComplex*>(work), lwork,
      devInfo));
}

#ifdef USE_CUSOLVER_64_BIT

template<> hipDataType get_hipsolver_datatype<float>() { return HIP_R_32F; }
template<> hipDataType get_hipsolver_datatype<double>() { return HIP_R_64F; }
template<> hipDataType get_hipsolver_datatype<c10::complex<float>>() { return HIP_C_32F; }
template<> hipDataType get_hipsolver_datatype<c10::complex<double>>() { return HIP_C_64F; }

void xpotrf_buffersize(
    hipsolverDnHandle_t handle, hipsolverDnParams_t params, hipsolverFillMode_t uplo, int64_t n, hipDataType dataTypeA, const void *A,
    int64_t lda, hipDataType computeType, size_t *workspaceInBytesOnDevice, size_t *workspaceInBytesOnHost) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXpotrf_bufferSize(
    handle, params, uplo, n, dataTypeA, A, lda, computeType, workspaceInBytesOnDevice, workspaceInBytesOnHost
  ));
}

void xpotrf(
    hipsolverDnHandle_t handle, hipsolverDnParams_t params, hipsolverFillMode_t uplo, int64_t n, hipDataType dataTypeA, void *A,
    int64_t lda, hipDataType computeType, void *bufferOnDevice, size_t workspaceInBytesOnDevice, void *bufferOnHost, size_t workspaceInBytesOnHost,
    int *info) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXpotrf(
    handle, params, uplo, n, dataTypeA, A, lda, computeType, bufferOnDevice, workspaceInBytesOnDevice, bufferOnHost, workspaceInBytesOnHost, info
  ));
}
#endif // USE_CUSOLVER_64_BIT

template <>
void syevd_bufferSize<float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const float* A,
    int lda,
    const float* W,
    int* lwork) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnSsyevd_bufferSize(handle, jobz, uplo, n, A, lda, W, lwork));
}

template <>
void syevd_bufferSize<double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const double* A,
    int lda,
    const double* W,
    int* lwork) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnDsyevd_bufferSize(handle, jobz, uplo, n, A, lda, W, lwork));
}

template <>
void syevd_bufferSize<c10::complex<float>, float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const c10::complex<float>* A,
    int lda,
    const float* W,
    int* lwork) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCheevd_bufferSize(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<const hipComplex*>(A),
      lda,
      W,
      lwork));
}

template <>
void syevd_bufferSize<c10::complex<double>, double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const c10::complex<double>* A,
    int lda,
    const double* W,
    int* lwork) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZheevd_bufferSize(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<const hipDoubleComplex*>(A),
      lda,
      W,
      lwork));
}

template <>
void syevd<float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    float* A,
    int lda,
    float* W,
    float* work,
    int lwork,
    int* info) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnSsyevd(handle, jobz, uplo, n, A, lda, W, work, lwork, info));
}

template <>
void syevd<double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    double* A,
    int lda,
    double* W,
    double* work,
    int lwork,
    int* info) {
  TORCH_HIPSOLVER_CHECK(
      hipsolverDnDsyevd(handle, jobz, uplo, n, A, lda, W, work, lwork, info));
}

template <>
void syevd<c10::complex<float>, float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    c10::complex<float>* A,
    int lda,
    float* W,
    c10::complex<float>* work,
    int lwork,
    int* info) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCheevd(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<hipComplex*>(A),
      lda,
      W,
      reinterpret_cast<hipComplex*>(work),
      lwork,
      info));
}

template <>
void syevd<c10::complex<double>, double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    c10::complex<double>* A,
    int lda,
    double* W,
    c10::complex<double>* work,
    int lwork,
    int* info) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZheevd(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<hipDoubleComplex*>(A),
      lda,
      W,
      reinterpret_cast<hipDoubleComplex*>(work),
      lwork,
      info));
}

template <>
void syevj_bufferSize<float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const float* A,
    int lda,
    const float* W,
    int* lwork,
    hipsolverSyevjInfo_t params) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSsyevj_bufferSize(
      handle, jobz, uplo, n, A, lda, W, lwork, params));
}

template <>
void syevj_bufferSize<double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const double* A,
    int lda,
    const double* W,
    int* lwork,
    hipsolverSyevjInfo_t params) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDsyevj_bufferSize(
      handle, jobz, uplo, n, A, lda, W, lwork, params));
}

template <>
void syevj_bufferSize<c10::complex<float>, float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const c10::complex<float>* A,
    int lda,
    const float* W,
    int* lwork,
    hipsolverSyevjInfo_t params) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCheevj_bufferSize(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<const hipComplex*>(A),
      lda,
      W,
      lwork,
      params));
}

template <>
void syevj_bufferSize<c10::complex<double>, double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const c10::complex<double>* A,
    int lda,
    const double* W,
    int* lwork,
    hipsolverSyevjInfo_t params) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZheevj_bufferSize(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<const hipDoubleComplex*>(A),
      lda,
      W,
      lwork,
      params));
}

template <>
void syevj<float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    float* A,
    int lda,
    float* W,
    float* work,
    int lwork,
    int* info,
    hipsolverSyevjInfo_t params) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSsyevj(
      handle, jobz, uplo, n, A, lda, W, work, lwork, info, params));
}

template <>
void syevj<double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    double* A,
    int lda,
    double* W,
    double* work,
    int lwork,
    int* info,
    hipsolverSyevjInfo_t params) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDsyevj(
      handle, jobz, uplo, n, A, lda, W, work, lwork, info, params));
}

template <>
void syevj<c10::complex<float>, float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    c10::complex<float>* A,
    int lda,
    float* W,
    c10::complex<float>* work,
    int lwork,
    int* info,
    hipsolverSyevjInfo_t params) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCheevj(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<hipComplex*>(A),
      lda,
      W,
      reinterpret_cast<hipComplex*>(work),
      lwork,
      info,
      params));
}

template <>
void syevj<c10::complex<double>, double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    c10::complex<double>* A,
    int lda,
    double* W,
    c10::complex<double>* work,
    int lwork,
    int* info,
    hipsolverSyevjInfo_t params) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZheevj(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<hipDoubleComplex*>(A),
      lda,
      W,
      reinterpret_cast<hipDoubleComplex*>(work),
      lwork,
      info,
      params));
}

template <>
void syevjBatched_bufferSize<float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const float* A,
    int lda,
    const float* W,
    int* lwork,
    hipsolverSyevjInfo_t params,
    int batchsize) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSsyevjBatched_bufferSize(
      handle, jobz, uplo, n, A, lda, W, lwork, params, batchsize));
}

template <>
void syevjBatched_bufferSize<double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const double* A,
    int lda,
    const double* W,
    int* lwork,
    hipsolverSyevjInfo_t params,
    int batchsize) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDsyevjBatched_bufferSize(
      handle, jobz, uplo, n, A, lda, W, lwork, params, batchsize));
}

template <>
void syevjBatched_bufferSize<c10::complex<float>, float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const c10::complex<float>* A,
    int lda,
    const float* W,
    int* lwork,
    hipsolverSyevjInfo_t params,
    int batchsize) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCheevjBatched_bufferSize(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<const hipComplex*>(A),
      lda,
      W,
      lwork,
      params,
      batchsize));
}

template <>
void syevjBatched_bufferSize<c10::complex<double>, double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    const c10::complex<double>* A,
    int lda,
    const double* W,
    int* lwork,
    hipsolverSyevjInfo_t params,
    int batchsize) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZheevjBatched_bufferSize(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<const hipDoubleComplex*>(A),
      lda,
      W,
      lwork,
      params,
      batchsize));
}

template <>
void syevjBatched<float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    float* A,
    int lda,
    float* W,
    float* work,
    int lwork,
    int* info,
    hipsolverSyevjInfo_t params,
    int batchsize) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnSsyevjBatched(
      handle, jobz, uplo, n, A, lda, W, work, lwork, info, params, batchsize));
}

template <>
void syevjBatched<double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    double* A,
    int lda,
    double* W,
    double* work,
    int lwork,
    int* info,
    hipsolverSyevjInfo_t params,
    int batchsize) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnDsyevjBatched(
      handle, jobz, uplo, n, A, lda, W, work, lwork, info, params, batchsize));
}

template <>
void syevjBatched<c10::complex<float>, float>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    c10::complex<float>* A,
    int lda,
    float* W,
    c10::complex<float>* work,
    int lwork,
    int* info,
    hipsolverSyevjInfo_t params,
    int batchsize) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnCheevjBatched(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<hipComplex*>(A),
      lda,
      W,
      reinterpret_cast<hipComplex*>(work),
      lwork,
      info,
      params,
      batchsize));
}

template <>
void syevjBatched<c10::complex<double>, double>(
    hipsolverDnHandle_t handle,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int n,
    c10::complex<double>* A,
    int lda,
    double* W,
    c10::complex<double>* work,
    int lwork,
    int* info,
    hipsolverSyevjInfo_t params,
    int batchsize) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnZheevjBatched(
      handle,
      jobz,
      uplo,
      n,
      reinterpret_cast<hipDoubleComplex*>(A),
      lda,
      W,
      reinterpret_cast<hipDoubleComplex*>(work),
      lwork,
      info,
      params,
      batchsize));
}

#ifdef USE_CUSOLVER_64_BIT

void xpotrs(
    hipsolverDnHandle_t handle, hipsolverDnParams_t params, hipsolverFillMode_t uplo, int64_t n, int64_t nrhs, hipDataType dataTypeA, const void *A,
    int64_t lda, hipDataType dataTypeB, void *B, int64_t ldb, int *info) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXpotrs(handle, params, uplo, n, nrhs, dataTypeA, A, lda, dataTypeB, B, ldb, info));
}

template <>
void xgeqrf_bufferSize<float>(HIPSOLVER_XGEQRF_BUFFERSIZE_ARGTYPES(float)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXgeqrf_bufferSize(
      handle,
      params,
      m,
      n,
      HIP_R_32F,
      reinterpret_cast<const void*>(A),
      lda,
      HIP_R_32F,
      reinterpret_cast<const void*>(tau),
      HIP_R_32F,
      workspaceInBytesOnDevice,
      workspaceInBytesOnHost));
}

template <>
void xgeqrf_bufferSize<double>(HIPSOLVER_XGEQRF_BUFFERSIZE_ARGTYPES(double)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXgeqrf_bufferSize(
      handle,
      params,
      m,
      n,
      HIP_R_64F,
      reinterpret_cast<const void*>(A),
      lda,
      HIP_R_64F,
      reinterpret_cast<const void*>(tau),
      HIP_R_64F,
      workspaceInBytesOnDevice,
      workspaceInBytesOnHost));
}

template <>
void xgeqrf_bufferSize<c10::complex<float>>(
    HIPSOLVER_XGEQRF_BUFFERSIZE_ARGTYPES(c10::complex<float>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXgeqrf_bufferSize(
      handle,
      params,
      m,
      n,
      HIP_C_32F,
      reinterpret_cast<const void*>(A),
      lda,
      HIP_C_32F,
      reinterpret_cast<const void*>(tau),
      HIP_C_32F,
      workspaceInBytesOnDevice,
      workspaceInBytesOnHost));
}

template <>
void xgeqrf_bufferSize<c10::complex<double>>(
    HIPSOLVER_XGEQRF_BUFFERSIZE_ARGTYPES(c10::complex<double>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXgeqrf_bufferSize(
      handle,
      params,
      m,
      n,
      HIP_C_64F,
      reinterpret_cast<const void*>(A),
      lda,
      HIP_C_64F,
      reinterpret_cast<const void*>(tau),
      HIP_C_64F,
      workspaceInBytesOnDevice,
      workspaceInBytesOnHost));
}

template <>
void xgeqrf<float>(HIPSOLVER_XGEQRF_ARGTYPES(float)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXgeqrf(
      handle,
      params,
      m,
      n,
      HIP_R_32F,
      reinterpret_cast<void*>(A),
      lda,
      HIP_R_32F,
      reinterpret_cast<void*>(tau),
      HIP_R_32F,
      reinterpret_cast<void*>(bufferOnDevice),
      workspaceInBytesOnDevice,
      reinterpret_cast<void*>(bufferOnHost),
      workspaceInBytesOnHost,
      info));
}

template <>
void xgeqrf<double>(HIPSOLVER_XGEQRF_ARGTYPES(double)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXgeqrf(
      handle,
      params,
      m,
      n,
      HIP_R_64F,
      reinterpret_cast<void*>(A),
      lda,
      HIP_R_64F,
      reinterpret_cast<void*>(tau),
      HIP_R_64F,
      reinterpret_cast<void*>(bufferOnDevice),
      workspaceInBytesOnDevice,
      reinterpret_cast<void*>(bufferOnHost),
      workspaceInBytesOnHost,
      info));
}

template <>
void xgeqrf<c10::complex<float>>(HIPSOLVER_XGEQRF_ARGTYPES(c10::complex<float>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXgeqrf(
      handle,
      params,
      m,
      n,
      HIP_C_32F,
      reinterpret_cast<void*>(A),
      lda,
      HIP_C_32F,
      reinterpret_cast<void*>(tau),
      HIP_C_32F,
      reinterpret_cast<void*>(bufferOnDevice),
      workspaceInBytesOnDevice,
      reinterpret_cast<void*>(bufferOnHost),
      workspaceInBytesOnHost,
      info));
}

template <>
void xgeqrf<c10::complex<double>>(HIPSOLVER_XGEQRF_ARGTYPES(c10::complex<double>)) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXgeqrf(
      handle,
      params,
      m,
      n,
      HIP_C_64F,
      reinterpret_cast<void*>(A),
      lda,
      HIP_C_64F,
      reinterpret_cast<void*>(tau),
      HIP_C_64F,
      reinterpret_cast<void*>(bufferOnDevice),
      workspaceInBytesOnDevice,
      reinterpret_cast<void*>(bufferOnHost),
      workspaceInBytesOnHost,
      info));
}

template <>
void xsyevd_bufferSize<float>(
    hipsolverDnHandle_t handle,
    hipsolverDnParams_t params,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int64_t n,
    const float* A,
    int64_t lda,
    const float* W,
    size_t* workspaceInBytesOnDevice,
    size_t* workspaceInBytesOnHost) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXsyevd_bufferSize(
      handle,
      params,
      jobz,
      uplo,
      n,
      HIP_R_32F,
      reinterpret_cast<const void*>(A),
      lda,
      HIP_R_32F,
      reinterpret_cast<const void*>(W),
      HIP_R_32F,
      workspaceInBytesOnDevice,
      workspaceInBytesOnHost));
}

template <>
void xsyevd_bufferSize<double>(
    hipsolverDnHandle_t handle,
    hipsolverDnParams_t params,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int64_t n,
    const double* A,
    int64_t lda,
    const double* W,
    size_t* workspaceInBytesOnDevice,
    size_t* workspaceInBytesOnHost) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXsyevd_bufferSize(
      handle,
      params,
      jobz,
      uplo,
      n,
      HIP_R_64F,
      reinterpret_cast<const void*>(A),
      lda,
      HIP_R_64F,
      reinterpret_cast<const void*>(W),
      HIP_R_64F,
      workspaceInBytesOnDevice,
      workspaceInBytesOnHost));
}

template <>
void xsyevd_bufferSize<c10::complex<float>, float>(
    hipsolverDnHandle_t handle,
    hipsolverDnParams_t params,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int64_t n,
    const c10::complex<float>* A,
    int64_t lda,
    const float* W,
    size_t* workspaceInBytesOnDevice,
    size_t* workspaceInBytesOnHost) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXsyevd_bufferSize(
      handle,
      params,
      jobz,
      uplo,
      n,
      HIP_C_32F,
      reinterpret_cast<const void*>(A),
      lda,
      HIP_R_32F,
      reinterpret_cast<const void*>(W),
      HIP_C_32F,
      workspaceInBytesOnDevice,
      workspaceInBytesOnHost));
}

template <>
void xsyevd_bufferSize<c10::complex<double>, double>(
    hipsolverDnHandle_t handle,
    hipsolverDnParams_t params,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int64_t n,
    const c10::complex<double>* A,
    int64_t lda,
    const double* W,
    size_t* workspaceInBytesOnDevice,
    size_t* workspaceInBytesOnHost) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXsyevd_bufferSize(
      handle,
      params,
      jobz,
      uplo,
      n,
      HIP_C_64F,
      reinterpret_cast<const void*>(A),
      lda,
      HIP_R_64F,
      reinterpret_cast<const void*>(W),
      HIP_C_64F,
      workspaceInBytesOnDevice,
      workspaceInBytesOnHost));
}

template <>
void xsyevd<float>(
    hipsolverDnHandle_t handle,
    hipsolverDnParams_t params,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int64_t n,
    float* A,
    int64_t lda,
    float* W,
    float* bufferOnDevice,
    size_t workspaceInBytesOnDevice,
    float* bufferOnHost,
    size_t workspaceInBytesOnHost,
    int* info) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXsyevd(
      handle,
      params,
      jobz,
      uplo,
      n,
      HIP_R_32F,
      reinterpret_cast<void*>(A),
      lda,
      HIP_R_32F,
      reinterpret_cast<void*>(W),
      HIP_R_32F,
      reinterpret_cast<void*>(bufferOnDevice),
      workspaceInBytesOnDevice,
      reinterpret_cast<void*>(bufferOnHost),
      workspaceInBytesOnHost,
      info));
}

template <>
void xsyevd<double>(
    hipsolverDnHandle_t handle,
    hipsolverDnParams_t params,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int64_t n,
    double* A,
    int64_t lda,
    double* W,
    double* bufferOnDevice,
    size_t workspaceInBytesOnDevice,
    double* bufferOnHost,
    size_t workspaceInBytesOnHost,
    int* info) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXsyevd(
      handle,
      params,
      jobz,
      uplo,
      n,
      HIP_R_64F,
      reinterpret_cast<void*>(A),
      lda,
      HIP_R_64F,
      reinterpret_cast<void*>(W),
      HIP_R_64F,
      reinterpret_cast<void*>(bufferOnDevice),
      workspaceInBytesOnDevice,
      reinterpret_cast<void*>(bufferOnHost),
      workspaceInBytesOnHost,
      info));
}

template <>
void xsyevd<c10::complex<float>, float>(
    hipsolverDnHandle_t handle,
    hipsolverDnParams_t params,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int64_t n,
    c10::complex<float>* A,
    int64_t lda,
    float* W,
    c10::complex<float>* bufferOnDevice,
    size_t workspaceInBytesOnDevice,
    c10::complex<float>* bufferOnHost,
    size_t workspaceInBytesOnHost,
    int* info) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXsyevd(
      handle,
      params,
      jobz,
      uplo,
      n,
      HIP_C_32F,
      reinterpret_cast<void*>(A),
      lda,
      HIP_R_32F,
      reinterpret_cast<void*>(W),
      HIP_C_32F,
      reinterpret_cast<void*>(bufferOnDevice),
      workspaceInBytesOnDevice,
      reinterpret_cast<void*>(bufferOnHost),
      workspaceInBytesOnHost,
      info));
}

template <>
void xsyevd<c10::complex<double>, double>(
    hipsolverDnHandle_t handle,
    hipsolverDnParams_t params,
    hipsolverEigMode_t jobz,
    hipsolverFillMode_t uplo,
    int64_t n,
    c10::complex<double>* A,
    int64_t lda,
    double* W,
    c10::complex<double>* bufferOnDevice,
    size_t workspaceInBytesOnDevice,
    c10::complex<double>* bufferOnHost,
    size_t workspaceInBytesOnHost,
    int* info) {
  TORCH_HIPSOLVER_CHECK(hipsolverDnXsyevd(
      handle,
      params,
      jobz,
      uplo,
      n,
      HIP_C_64F,
      reinterpret_cast<void*>(A),
      lda,
      HIP_R_64F,
      reinterpret_cast<void*>(W),
      HIP_C_64F,
      reinterpret_cast<void*>(bufferOnDevice),
      workspaceInBytesOnDevice,
      reinterpret_cast<void*>(bufferOnHost),
      workspaceInBytesOnHost,
      info));
}
#endif // USE_CUSOLVER_64_BIT

} // namespace at::zoom::solver
